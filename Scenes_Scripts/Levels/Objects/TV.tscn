[gd_scene load_steps=12 format=3 uid="uid://dxjgsggwy0tir"]

[ext_resource type="Script" path="res://Scenes_Scripts/Levels/Objects/TV.gd" id="1_85e2u"]
[ext_resource type="PackedScene" uid="uid://cn0moilkovbc3" path="res://Blender/TV.gltf" id="1_ibuwa"]
[ext_resource type="PackedScene" uid="uid://nf1bgcn3f8w0" path="res://Scenes_Scripts/Entities/Entity Elements/Interactable.tscn" id="2_6gnio"]
[ext_resource type="AudioStream" uid="uid://dfjjwri4j47u7" path="res://Scenes_Scripts/Sounds/static_test1.wav" id="4_1kp6h"]

[sub_resource type="Shader" id="Shader_ixolb"]
code = "//Copyright 2021 redvillusion
//
//Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files 
//(the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, 
//merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished
//to do so, subject to the following conditions:
//
//The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
//
//THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES 
//OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE 
//LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR 
//IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 
shader_type spatial;
 
render_mode unshaded, cull_front;
 
uniform bool enabled = false;
const float transparency = 0.0;
 
uniform float border_width : hint_range(0,1,0.001) = 0.02;
uniform vec4 color : source_color = vec4(0.71, 0.267, 0.51, 1);
 
uniform bool pattern = true;
uniform float line_number : hint_range(0,100,1) = 2;
uniform float line_sharpness : hint_range(0,10,0.001) = 1;
 
uniform bool pulse;
uniform float pulse_speed : hint_range(0,100,1);
 
uniform bool line_movement = true;
uniform float line_movement_speed : hint_range(-100,100,1) = 1;
 
uniform bool wave;
 
void vertex() {
	
	VERTEX += VERTEX * border_width * float(enabled);
}
 
void fragment() {
	
	ALPHA = transparency;
	if (enabled) {
		ALBEDO = color.xyz;
		ALPHA = color.a;
		if (pattern)
			{
				vec2 uv = VERTEX.xy * line_number;
				ALBEDO = sin(uv.xxx + uv.yyy) * line_sharpness * color.xyz;
		 
				if (pulse)
				{
					ALBEDO = sin(uv.xxx + uv.yyy) * line_sharpness * color.xyz * sin(TIME * pulse_speed);
				}
		 
				if (line_movement)
				{
					ALBEDO = sin(uv.xxx + uv.yyy + TIME * line_movement_speed) * line_sharpness * color.xyz;
				}
		 
				if (pulse && line_movement)
				{
					ALBEDO = sin(uv.xxx + uv.yyy + TIME * line_movement_speed) * line_sharpness * color.xyz * sin(TIME * pulse_speed);
				}
			}
	}
	
 
	if (wave)
	{
		vec2 uv = VERTEX.xy * line_number;
		ALBEDO = sin(uv.xxx + TIME * line_movement_speed) * line_sharpness * color.xyz;
	}
 
}"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_1n6l8"]
render_priority = 0
shader = SubResource("Shader_ixolb")
shader_parameter/enabled = false
shader_parameter/border_width = 0.02
shader_parameter/color = Color(0.71, 0.267, 0.51, 1)
shader_parameter/pattern = true
shader_parameter/line_number = 2.0
shader_parameter/line_sharpness = 1.0
shader_parameter/pulse = null
shader_parameter/pulse_speed = null
shader_parameter/line_movement = true
shader_parameter/line_movement_speed = 1.0
shader_parameter/wave = null

[sub_resource type="BoxShape3D" id="BoxShape3D_fifbk"]
size = Vector3(1.08362, 1.08362, 1)

[sub_resource type="BoxShape3D" id="BoxShape3D_o050e"]
size = Vector3(4, 4, 4)

[sub_resource type="Gradient" id="Gradient_5i4bk"]
colors = PackedColorArray(0.462291, 0.462291, 0.462291, 1, 1, 1, 1, 1)

[sub_resource type="FastNoiseLite" id="FastNoiseLite_e2nep"]
noise_type = 5
frequency = 1.0
fractal_type = 0
domain_warp_type = 1

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_lq2ii"]
color_ramp = SubResource("Gradient_5i4bk")
noise = SubResource("FastNoiseLite_e2nep")

[node name="TV" type="RigidBody3D" node_paths=PackedStringArray("focused_meshes")]
collision_layer = 128
collision_mask = 71
script = ExtResource("1_85e2u")
monologue_data = Array[String](["[center]A primitive broadcast receiver.[/center][center]It seems that no one is transmitting anything this far out from [i]The Core[/i].[/center]", "[center]...but all the infrastructure should still be intact. Perplexing.[/center]"])
monologue_first_line_time = 0.5
focused_meshes = [NodePath("TV/Television A")]

[node name="TV" parent="." instance=ExtResource("1_ibuwa")]

[node name="Television A" parent="TV" index="0"]
material_overlay = SubResource("ShaderMaterial_1n6l8")

[node name="Collider" type="CollisionShape3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.544729, -0.200195)
shape = SubResource("BoxShape3D_fifbk")

[node name="Interactable" parent="." instance=ExtResource("2_6gnio")]

[node name="CollisionShape3D" parent="Interactable" index="0"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.544729, -0.200195)
shape = SubResource("BoxShape3D_fifbk")

[node name="CollisionShape3D" parent="Interactable/InteractableRange" index="0"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.544729, -0.200195)
shape = SubResource("BoxShape3D_o050e")

[node name="StaticAudioPlayer" type="AudioStreamPlayer3D" parent="."]
stream = ExtResource("4_1kp6h")
attenuation_model = 2
max_distance = 15.0
bus = &"Sounds"

[node name="SpotLight3D" type="SpotLight3D" parent="."]
transform = Transform3D(-1, 0, -8.74228e-08, 0, 1, 0, 8.74228e-08, 0, -1, 0, 0.627879, 0.312964)
shadow_enabled = true
spot_range = 9.0
spot_angle = 85.0

[node name="NoiseSprite" type="Sprite3D" parent="."]
transform = Transform3D(0.22, 0, 0, 0, 0.22, 0, 0, 0, 0.22, 0, 0.659703, 0.326403)
texture = SubResource("NoiseTexture2D_lq2ii")

[connection signal="focused" from="Interactable" to="." method="_on_interactable_focused"]
[connection signal="interact" from="Interactable" to="." method="_on_interactable_interact"]
[connection signal="unfocused" from="Interactable" to="." method="_on_interactable_unfocused"]
[connection signal="finished" from="StaticAudioPlayer" to="." method="_on_static_audio_player_finished"]

[editable path="TV"]
[editable path="Interactable"]
